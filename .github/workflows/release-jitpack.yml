name: JitPack Release

permissions:
  contents: write

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [8, 11, 17, 21, 22, 23, 24]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Run tests
      run: ./gradlew test
    
    - name: Build with Gradle
      run: ./gradlew build
    
    - name: Test JitPack publish
      run: ./gradlew publishToMavenLocal
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.java-version == 8
      with:
        name: jar-artifacts
        path: |
          */build/libs/*.jar
          !*/build/libs/*-sources.jar
          !*/build/libs/*-javadoc.jar

  jitpack-compatibility:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: 8
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Test JitPack build simulation
      run: |
        chmod +x gradlew
        ./gradlew clean
        ./gradlew publishToMavenLocal
        echo "JitPack compatibility verified"

  release:
    runs-on: ubuntu-latest
    needs: [test, jitpack-compatibility]
    # 보안: 배포 토큰 있을 때만 배포
    if: secrets.DEPLOY_TOKEN != ''
    env:
      GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Final build for release
        run: ./gradlew build

      - name: Determine PR title for tag
        id: find_pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPLOY_TOKEN }}
          script: |
            const { data: pulls } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
            });
            if (!pulls.length) {
              console.log("No pull request found for this commit, using default tag");
              const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
              core.setOutput("tag", `v0.1.0-${timestamp}`);
              return;
            }
            const prTitle = pulls[0].title.trim();
      
            const tag = prTitle.replace(/[^a-zA-Z0-9.-]/g, '-').replace(/-+/g, '-');
            core.setOutput("tag", tag);

      - name: Create and push tag
        run: |
          TAG="${{ steps.find_pr.outputs.tag }}"
          echo "Tagging release: $TAG"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$TAG"
          git push origin "$TAG"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          github_token: ${{ secrets.DEPLOY_TOKEN }}
          tag_name: ${{ steps.find_pr.outputs.tag }}
          release_name: "${{ steps.find_pr.outputs.tag }}"
          body: |
            자동 생성 릴리스: ${{ steps.find_pr.outputs.tag }}
            
            이 릴리스는 JitPack을 통해 사용할 수 있습니다:
            ```gradle
            repositories {
                maven { url 'https://jitpack.io' }
            }
            
            dependencies {
                implementation 'com.github.hj4645:commit-chronicle:${{ steps.find_pr.outputs.tag }}'
            }
            ```
          draft: false
          prerelease: false 